{"remainingRequest":"/home/melissa/Bureau/TodoListProject/node_modules/babel-loader/lib/index.js!/home/melissa/Bureau/TodoListProject/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/melissa/Bureau/TodoListProject/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/melissa/Bureau/TodoListProject/src/components/TodoList.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/melissa/Bureau/TodoListProject/src/components/TodoList.vue","mtime":1615119843880},{"path":"/home/melissa/Bureau/TodoListProject/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/melissa/Bureau/TodoListProject/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/melissa/Bureau/TodoListProject/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/melissa/Bureau/TodoListProject/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvbWVsaXNzYS9CdXJlYXUvVG9kb0xpc3RQcm9qZWN0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IHsgbWFwR2V0dGVycywgbWFwQWN0aW9ucyB9IGZyb20gJ3Z1ZXgnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1RvZG9MaXN0JywKICBwcm9wczogewogICAgaWQ6IHsKICAgICAgdHlwZTogTnVtYmVyCiAgICB9CiAgfSwKICBtZXRob2RzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcEFjdGlvbnMoJ3RvZG9MaXN0JywgWydhZGRUb2RvJywgJ3JlbW92ZVRvZG8nLCAndG9kb0NvbXBsZXRlZCddKSksIHt9LCB7CiAgICBzZXRGaWx0ZXI6IGZ1bmN0aW9uIHNldEZpbHRlcih2YWx1ZSkgewogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3RvZG9MaXN0L1NFVF9GSUxURVInLCB2YWx1ZSk7CiAgICB9CiAgfSksCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwR2V0dGVycygndG9kb0xpc3QnLCBbJ2ZpbHRlcmVkVG9kb3MnLCAncmVtYWluaW5nVG9kb3MnXSkpLCB7fSwgewogICAgbmV3VG9kbzogewogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUubmV3VG9kbzsKICAgICAgfSwKICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3RvZG9MaXN0L1NFVF9ORVdfVE9ETycsIHZhbHVlKTsKICAgICAgfQogICAgfQogIH0pCn07"},{"version":3,"sources":["/home/melissa/Bureau/TodoListProject/src/components/TodoList.vue"],"names":[],"mappings":";;AAsBA,SAAQ,UAAR,EAAoB,UAApB,QAAqC,MAArC;AAEA,eAAe;AACb,EAAA,IAAI,EAAE,UADO;AAEb,EAAA,KAAK,EAAE;AACL,IAAA,EAAE,EAAE;AAAC,MAAA,IAAI,EAAE;AAAP;AADC,GAFM;AAKb,EAAA,OAAO,kCACF,UAAU,CAAC,UAAD,EAAa,CAAC,SAAD,EAAY,YAAZ,EAA0B,eAA1B,CAAb,CADR;AAEL,IAAA,SAFK,qBAEK,KAFL,EAEY;AACf,WAAK,MAAL,CAAY,MAAZ,CAAmB,qBAAnB,EAA0C,KAA1C;AACF;AAJK,IALM;AAWb,EAAA,QAAQ,kCACH,UAAU,CAAC,UAAD,EAAa,CAAC,eAAD,EAAkB,gBAAlB,CAAb,CADP;AAEN,IAAA,OAAO,EAAE;AACP,MAAA,GADO,iBACD;AACJ,eAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,OAAzB;AACD,OAHM;AAIP,MAAA,GAJO,eAIH,KAJG,EAII;AACT,aAAK,MAAL,CAAY,MAAZ,CAAmB,uBAAnB,EAA4C,KAA5C;AACF;AANO;AAFH;AAXK,CAAf","sourcesContent":["<template>\n    <main class=\"shadow-lg p-3 mb-5 bg-body rounded\">\n        <form @submit.prevent=\"addTodo(id)\">\n            <input type=\"text\" v-model=\"newTodo\">\n            <input type=\"submit\" value=\"Add todo\">\n        </form>\n        <p class=\"filters\">\n            <button @click=\"setFilter('all')\">All</button>\n            <button @click=\"setFilter('completed')\">Completed</button>\n            <button @click=\"setFilter('not-completed')\">Not Completed</button>\n        </p>\n        <ul>\n            <li v-for=\"todo in filteredTodos(id)\" :key=\"todo.id\" @click=\"todoCompleted([id, todo.id])\">\n                <span :class=\"{ completed: todo.completed }\"><input type=\"checkbox\" :checked=\"todo.completed\">{{todo.name}}</span>\n                <button @click.stop=\"removeTodo([id, todo.id])\">&times;</button>\n            </li>\n        </ul>\n        <p>Vous avez <strong>{{ remainingTodos(id) }}</strong> tâche(s) à faire</p>\n    </main>\n</template>\n\n<script>\nimport {mapGetters, mapActions} from 'vuex'\n\nexport default {\n  name: 'TodoList',\n  props: {\n    id: {type: Number}\n  },\n  methods: {\n    ...mapActions('todoList', ['addTodo', 'removeTodo', 'todoCompleted']),\n    setFilter(value) {\n      this.$store.commit('todoList/SET_FILTER', value)\n    }\n  },\n  computed: {\n    ...mapGetters('todoList', ['filteredTodos', 'remainingTodos']),\n    newTodo: {\n      get() {\n        return this.$store.state.newTodo\n      },\n      set(value) {\n        this.$store.commit('todoList/SET_NEW_TODO', value)\n      }\n    },   \n  },\n}\n</script>\n\n<style scoped>\nmain {\n  grid-area: section;\n}\nul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\nli {\n    border: 1px solid #ccc;\n    display: flex;\n    justify-content: space-between;\n    padding: .5rem 2rem;\n    margin: .5rem 0;\n}\nli:hover {\n    background: #eee;\n}\n.filters {\n  margin-bottom: .5rem;\n}\n.filters button {\n  margin-right: .5rem;\n}\ninput[type=\"checkbox\"] {\n    margin-right: .5rem;\n}\n.completed {\n    text-decoration: line-through;\n}\n</style>"],"sourceRoot":""}]}